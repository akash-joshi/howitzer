1
00:00:00,000 --> 00:00:01,740
 So, yeah. Hi,

2
00:00:01,740 --> 00:00:04,380
 everyone. And thanks

3
00:00:04,380 --> 00:00:05,120
 for coming to

4
00:00:05,120 --> 00:00:06,160
 Manchester Node.js

5
00:00:06,160 --> 00:00:07,380
 user group today. I'm

6
00:00:07,380 --> 00:00:09,000
 kidding, of course.

7
00:00:09,000 --> 00:00:10,420
 Thanks to Adam and

8
00:00:10,420 --> 00:00:12,030
 Thomas doing most of

9
00:00:12,030 --> 00:00:12,930
 the organizing

10
00:00:12,930 --> 00:00:13,560
 because I've

11
00:00:13,560 --> 00:00:14,720
 been away for a

12
00:00:14,720 --> 00:00:16,460
 while, so let's give

13
00:00:16,460 --> 00:00:18,140
 them a clap. And, of

14
00:00:18,140 --> 00:00:19,250
 course, thanks to

15
00:00:19,250 --> 00:00:19,720
 you guys

16
00:00:19,720 --> 00:00:20,690
 because it was a

17
00:00:20,690 --> 00:00:21,280
 really nice day

18
00:00:21,280 --> 00:00:22,360
 outside, but you all

19
00:00:22,360 --> 00:00:23,200
 nerds decided to

20
00:00:23,200 --> 00:00:24,300
 come here anyway,

21
00:00:24,300 --> 00:00:26,020
 so here we are. So,

22
00:00:26,020 --> 00:00:27,550
 yeah. I wanted to

23
00:00:27,550 --> 00:00:29,180
 talk about building

24
00:00:29,180 --> 00:00:30,800
 an AI-based CLI tool

25
00:00:30,800 --> 00:00:32,680
 in 2024.

26
00:00:32,680 --> 00:00:33,830
 The AI bit there is

27
00:00:33,830 --> 00:00:35,230
 mainly for the hype,

28
00:00:35,230 --> 00:00:36,460
 but I wanted to talk

29
00:00:36,460 --> 00:00:37,790
 about building a CLI

30
00:00:37,790 --> 00:00:38,240
 tool

31
00:00:38,240 --> 00:00:40,410
 in 2024. The problem

32
00:00:40,410 --> 00:00:41,470
 I saw while trying

33
00:00:41,470 --> 00:00:42,530
 to build a CLI tool

34
00:00:42,530 --> 00:00:43,800
 this year was that

35
00:00:43,800 --> 00:00:43,960
 there

36
00:00:43,960 --> 00:00:44,870
 aren't really --

37
00:00:44,870 --> 00:00:45,840
 there aren't that

38
00:00:45,840 --> 00:00:47,210
 many good articles

39
00:00:47,210 --> 00:00:47,590
 online about

40
00:00:47,590 --> 00:00:48,880
 building CLI tools.

41
00:00:48,880 --> 00:00:49,850
 Most of them are

42
00:00:49,850 --> 00:00:50,960
 from several eons

43
00:00:50,960 --> 00:00:52,150
 ago when it was like

44
00:00:52,150 --> 00:00:53,630
 Node.js 0.4 or

45
00:00:53,630 --> 00:00:55,200
 something, I guess.

46
00:00:55,200 --> 00:00:55,870
 So I decided to

47
00:00:55,870 --> 00:00:56,830
 create a talk around

48
00:00:56,830 --> 00:00:57,880
 this and also try to

49
00:00:57,880 --> 00:00:58,480
 create content

50
00:00:58,480 --> 00:00:59,120
 around this

51
00:00:59,120 --> 00:01:00,320
 so we can try to

52
00:01:00,320 --> 00:01:01,800
 understand how we

53
00:01:01,800 --> 00:01:04,310
 can build cross-compatible

54
00:01:04,310 --> 00:01:05,840
 OS, like cross-OS

55
00:01:05,840 --> 00:01:06,920
 compatible

56
00:01:06,920 --> 00:01:08,040
 CLIs using Node.js

57
00:01:08,040 --> 00:01:09,160
 now, and it's really

58
00:01:09,160 --> 00:01:10,420
 great at that. So,

59
00:01:10,420 --> 00:01:11,580
 yeah. I am the

60
00:01:11,580 --> 00:01:13,280
 writing.dev on

61
00:01:13,280 --> 00:01:14,570
 the Internet or the

62
00:01:14,570 --> 00:01:16,090
 writing.dev in most

63
00:01:16,090 --> 00:01:17,470
 places, including

64
00:01:17,470 --> 00:01:19,280
 Twitter. So, yeah.

65
00:01:19,280 --> 00:01:20,360
 Why? So why did

66
00:01:20,360 --> 00:01:21,730
 I want to build this?

67
00:01:21,730 --> 00:01:23,020
 Well, firstly, I was

68
00:01:23,020 --> 00:01:24,230
 experimenting with

69
00:01:24,230 --> 00:01:25,350
 AI just when the GPT

70
00:01:25,350 --> 00:01:25,680
 API

71
00:01:25,680 --> 00:01:27,240
 came out, so, yeah,

72
00:01:27,240 --> 00:01:28,150
 this is just a GPT

73
00:01:28,150 --> 00:01:29,980
 wrapper, in essence.

74
00:01:29,980 --> 00:01:30,910
 But, yeah, I think

75
00:01:30,910 --> 00:01:31,720
 it's really

76
00:01:31,720 --> 00:01:32,330
 cool to build

77
00:01:32,330 --> 00:01:33,120
 products around

78
00:01:33,120 --> 00:01:34,410
 elements nowadays

79
00:01:34,410 --> 00:01:35,080
 because of generative

80
00:01:35,080 --> 00:01:37,110
 AIs and stuff. You

81
00:01:37,110 --> 00:01:38,080
 can

82
00:01:38,080 --> 00:01:39,130
 build products which

83
00:01:39,130 --> 00:01:40,020
 are -- which can do

84
00:01:40,020 --> 00:01:41,000
 more -- I mean, it

85
00:01:41,000 --> 00:01:42,760
 sort of leads to non-deterministic

86
00:01:42,760 --> 00:01:44,800
 computing in a way.

87
00:01:44,800 --> 00:01:45,840
 And secondly, there's

88
00:01:45,840 --> 00:01:46,710
 more than one way of

89
00:01:46,710 --> 00:01:48,000
 building interfaces.

90
00:01:48,000 --> 00:01:48,620
 So this is Ryan

91
00:01:48,620 --> 00:01:49,540
 Hoover, the creator

92
00:01:49,540 --> 00:01:50,800
 of Product Hunt, who

93
00:01:50,800 --> 00:01:51,280
 commented on one of

94
00:01:51,280 --> 00:01:51,960
 the products

95
00:01:51,960 --> 00:01:53,630
 there saying that he's

96
00:01:53,630 --> 00:01:55,700
 interested in voice-driven

97
00:01:55,700 --> 00:01:57,490
 experiences, and,

98
00:01:57,490 --> 00:01:58,550
 yeah. So you see a

99
00:01:58,550 --> 00:01:58,920
 lot of

100
00:01:58,920 --> 00:02:00,000
 hype around that. So

101
00:02:00,000 --> 00:02:00,280
 just by

102
00:02:00,280 --> 00:02:00,790
 incorporating a

103
00:02:00,790 --> 00:02:01,380
 different kind of

104
00:02:01,380 --> 00:02:02,080
 interface into your

105
00:02:02,080 --> 00:02:02,480
 product,

106
00:02:02,480 --> 00:02:04,270
 you start generating

107
00:02:04,270 --> 00:02:05,520
 sort of ideas and

108
00:02:05,520 --> 00:02:07,720
 interest around your

109
00:02:07,720 --> 00:02:09,530
 product. And this

110
00:02:09,530 --> 00:02:11,200
 was a post or

111
00:02:11,200 --> 00:02:12,260
 a tweet by a VC, so

112
00:02:12,260 --> 00:02:13,400
 take it with a grain

113
00:02:13,400 --> 00:02:14,550
 of salt across, of

114
00:02:14,550 --> 00:02:15,620
 course, who said

115
00:02:15,620 --> 00:02:16,840
 that UI engineers

116
00:02:16,840 --> 00:02:17,850
 will lose their jobs

117
00:02:17,850 --> 00:02:18,830
 now because you can

118
00:02:18,830 --> 00:02:19,810
 just ask Siri to do

119
00:02:19,810 --> 00:02:20,820
 something, and then

120
00:02:20,820 --> 00:02:21,360
 it hooks

121
00:02:21,360 --> 00:02:22,640
 up into your app

122
00:02:22,640 --> 00:02:23,640
 using an API to

123
00:02:23,640 --> 00:02:25,260
 directly execute the

124
00:02:25,260 --> 00:02:26,700
 task. So, of course,

125
00:02:26,700 --> 00:02:27,800
 I wanted to

126
00:02:27,800 --> 00:02:28,710
 sort of go at the

127
00:02:28,710 --> 00:02:29,910
 back end of building

128
00:02:29,910 --> 00:02:31,170
 applications and try

129
00:02:31,170 --> 00:02:32,300
 to build something

130
00:02:32,300 --> 00:02:33,800
 which is just CLI-driven

131
00:02:33,800 --> 00:02:35,220
 for the start. So

132
00:02:35,220 --> 00:02:36,410
 what is the thing? I'll

133
00:02:36,410 --> 00:02:37,640
 give a quick demo of

134
00:02:37,640 --> 00:02:39,840
 how it works. And,

135
00:02:39,840 --> 00:02:40,680
 yeah,

136
00:02:40,680 --> 00:02:41,610
 parts of this --

137
00:02:41,610 --> 00:02:42,890
 yeah, just a content

138
00:02:42,890 --> 00:02:44,250
 warning. Some of the

139
00:02:44,250 --> 00:02:45,180
 slides that I'm

140
00:02:45,180 --> 00:02:46,360
 showing are light-themed.

141
00:02:46,360 --> 00:02:48,350
 I'm using a light-themed

142
00:02:48,350 --> 00:02:49,960
 with my co-editor,

143
00:02:49,960 --> 00:02:51,760
 so please don't

144
00:02:51,760 --> 00:02:53,160
 complain. And, yeah,

145
00:02:53,160 --> 00:02:53,560
 so how

146
00:02:53,560 --> 00:02:54,700
 does it work? So,

147
00:02:54,700 --> 00:02:55,330
 yeah, originally it

148
00:02:55,330 --> 00:02:55,960
 was called How, but

149
00:02:55,960 --> 00:02:56,710
 I changed the name

150
00:02:56,710 --> 00:02:57,480
 to Howitzer because

151
00:02:57,480 --> 00:02:58,470
 if you search for

152
00:02:58,470 --> 00:02:59,650
 How CLI Copilot, it

153
00:02:59,650 --> 00:03:00,610
 would just show

154
00:03:00,610 --> 00:03:02,020
 GitHub's copilot

155
00:03:02,020 --> 00:03:03,200
 instead. And, yeah,

156
00:03:03,200 --> 00:03:04,210
 so you can basically

157
00:03:04,210 --> 00:03:05,160
 ask questions to it

158
00:03:05,160 --> 00:03:06,330
 in natural language.

159
00:03:06,330 --> 00:03:06,990
 So you can ask

160
00:03:06,990 --> 00:03:07,580
 something

161
00:03:07,580 --> 00:03:09,300
 like how do I get my

162
00:03:09,300 --> 00:03:11,660
 system specs? And it

163
00:03:11,660 --> 00:03:14,000
 will then call the GPT

164
00:03:14,000 --> 00:03:16,120
 API, of course, and

165
00:03:16,120 --> 00:03:17,100
 it will give you the

166
00:03:17,100 --> 00:03:18,250
 command. Then you

167
00:03:18,250 --> 00:03:19,000
 can choose to run

168
00:03:19,000 --> 00:03:19,930
 the command which

169
00:03:19,930 --> 00:03:20,600
 then gives

170
00:03:20,600 --> 00:03:21,300
 you the output there

171
00:03:21,300 --> 00:03:22,200
 directly. So instead

172
00:03:22,200 --> 00:03:22,870
 of having to memorize

173
00:03:22,870 --> 00:03:23,280
 all of these

174
00:03:23,280 --> 00:03:23,760
 different

175
00:03:23,760 --> 00:03:25,300
 Unix commands, you

176
00:03:25,300 --> 00:03:26,630
 can just ask the CLI

177
00:03:26,630 --> 00:03:28,000
 tool directly.

178
00:03:28,000 --> 00:03:28,570
 Another simple thing

179
00:03:28,570 --> 00:03:28,960
 you might want

180
00:03:28,960 --> 00:03:30,390
 to do is, like, how

181
00:03:30,390 --> 00:03:31,620
 do I get the DNS

182
00:03:31,620 --> 00:03:33,630
 info of the writing.dev?

183
00:03:33,630 --> 00:03:34,740
 So I've already

184
00:03:34,740 --> 00:03:35,640
 completed

185
00:03:35,640 --> 00:03:36,940
 this already. So if

186
00:03:36,940 --> 00:03:38,150
 I run that, then,

187
00:03:38,150 --> 00:03:39,310
 yeah, it says dig

188
00:03:39,310 --> 00:03:40,920
 the writing.dev. If

189
00:03:40,920 --> 00:03:41,740
 I choose to

190
00:03:41,740 --> 00:03:42,880
 run this command,

191
00:03:42,880 --> 00:03:43,760
 then it gives the

192
00:03:43,760 --> 00:03:44,500
 output of the

193
00:03:44,500 --> 00:03:45,990
 command directly. So,

194
00:03:45,990 --> 00:03:46,280
 of course, as

195
00:03:46,280 --> 00:03:46,950
 you can see, it's a

196
00:03:46,950 --> 00:03:47,670
 very simple app.

197
00:03:47,670 --> 00:03:48,260
 Originally it was

198
00:03:48,260 --> 00:03:49,190
 less than 100 lines

199
00:03:49,190 --> 00:03:49,920
 of code, but then

200
00:03:49,920 --> 00:03:51,100
 I added some nice UX

201
00:03:51,100 --> 00:03:52,080
 around it which

202
00:03:52,080 --> 00:03:53,340
 increased the size a

203
00:03:53,340 --> 00:03:54,750
 little bit. But I'll

204
00:03:54,750 --> 00:03:55,440
 try to simplify

205
00:03:55,440 --> 00:03:57,760
 it as much as I can.

206
00:03:57,760 --> 00:03:59,470
 So, yeah, that is

207
00:03:59,470 --> 00:04:01,480
 the actual tool. And

208
00:04:01,480 --> 00:04:02,340
 now I want to go a

209
00:04:02,340 --> 00:04:02,680
 little

210
00:04:02,680 --> 00:04:03,390
 bit about the

211
00:04:03,390 --> 00:04:04,030
 problems and

212
00:04:04,030 --> 00:04:05,070
 solutions. So how

213
00:04:05,070 --> 00:04:05,980
 did I end up at this

214
00:04:05,980 --> 00:04:07,600
 phase? Of course. As

215
00:04:07,600 --> 00:04:08,530
 you can see, it's

216
00:04:08,530 --> 00:04:09,220
 just a simple

217
00:04:09,220 --> 00:04:10,300
 command. I say how

218
00:04:10,300 --> 00:04:10,850
 and then it

219
00:04:10,850 --> 00:04:11,950
 automatically runs

220
00:04:11,950 --> 00:04:12,200
 it

221
00:04:12,200 --> 00:04:13,350
 in the backend. So

222
00:04:13,350 --> 00:04:14,390
 it's a proper CLI

223
00:04:14,390 --> 00:04:15,560
 tool. But doing this

224
00:04:15,560 --> 00:04:16,490
 in Node.js is a

225
00:04:16,490 --> 00:04:17,280
 little bit

226
00:04:17,280 --> 00:04:18,830
 tough. So the first

227
00:04:18,830 --> 00:04:20,460
 problem is that, oh,

228
00:04:20,460 --> 00:04:21,330
 I think it's on a

229
00:04:21,330 --> 00:04:22,240
 timer probably, but,

230
00:04:22,240 --> 00:04:22,560
 yeah,

231
00:04:22,560 --> 00:04:23,540
 so the first problem

232
00:04:23,540 --> 00:04:24,520
 is that that I faced

233
00:04:24,520 --> 00:04:25,430
 was that TypeScript

234
00:04:25,430 --> 00:04:26,660
 sucks. I didn't want

235
00:04:26,660 --> 00:04:26,720
 to

236
00:04:26,720 --> 00:04:28,020
 write build tooling

237
00:04:28,020 --> 00:04:29,540
 around TypeScript.

238
00:04:29,540 --> 00:04:30,970
 So, for example, how

239
00:04:30,970 --> 00:04:32,200
 many ways are there

240
00:04:32,200 --> 00:04:32,800
 to build

241
00:04:32,800 --> 00:04:33,780
 a new TypeScript

242
00:04:33,780 --> 00:04:35,640
 project? I mean,

243
00:04:35,640 --> 00:04:37,930
 apart from one,

244
00:04:37,930 --> 00:04:40,960
 there's several,

245
00:04:40,960 --> 00:04:42,240
 like, for example,

246
00:04:42,240 --> 00:04:42,480
 TS

247
00:04:42,480 --> 00:04:44,220
 node, there's wheat,

248
00:04:44,220 --> 00:04:45,840
 there's parcel. I

249
00:04:45,840 --> 00:04:47,220
 mean, there's n

250
00:04:47,220 --> 00:04:48,240
 number of ways you

251
00:04:48,240 --> 00:04:49,920
 can build a TypeScript

252
00:04:49,920 --> 00:04:51,000
 project. But there's

253
00:04:51,000 --> 00:04:51,730
 one thing common

254
00:04:51,730 --> 00:04:52,570
 with all of them.

255
00:04:52,570 --> 00:04:53,260
 You're adding a

256
00:04:53,260 --> 00:04:54,000
 build step. So

257
00:04:54,000 --> 00:04:54,790
 you're adding

258
00:04:54,790 --> 00:04:55,900
 complexity into your

259
00:04:55,900 --> 00:04:57,140
 whole project. So

260
00:04:57,140 --> 00:04:58,330
 instead of that, I

261
00:04:58,330 --> 00:04:59,430
 wanted the ability

262
00:04:59,430 --> 00:04:59,560
 to

263
00:04:59,560 --> 00:05:00,570
 have types, but I

264
00:05:00,570 --> 00:05:01,650
 didn't want to have

265
00:05:01,650 --> 00:05:02,860
 a build step. So

266
00:05:02,860 --> 00:05:03,650
 what I did was use

267
00:05:03,650 --> 00:05:05,080
 ES modules instead.

268
00:05:05,080 --> 00:05:05,980
 If it's good enough

269
00:05:05,980 --> 00:05:07,050
 for Swelt, it's good

270
00:05:07,050 --> 00:05:08,030
 enough for your

271
00:05:08,030 --> 00:05:08,750
 project. So please

272
00:05:08,750 --> 00:05:09,840
 move to your ES

273
00:05:09,840 --> 00:05:10,910
 modules instead of

274
00:05:10,910 --> 00:05:11,980
 TypeScript to help

275
00:05:11,980 --> 00:05:12,650
 improve the

276
00:05:12,650 --> 00:05:13,880
 developer experience

277
00:05:13,880 --> 00:05:14,720
 around it.

278
00:05:14,720 --> 00:05:15,870
 ES modules have been

279
00:05:15,870 --> 00:05:17,210
 supported in Node.js

280
00:05:17,210 --> 00:05:19,180
 since 2019, actually,

281
00:05:19,180 --> 00:05:20,050
 and I'm going to

282
00:05:20,050 --> 00:05:20,440
 give

283
00:05:20,440 --> 00:05:21,480
 a demo of how they

284
00:05:21,480 --> 00:05:22,900
 actually look like.

285
00:05:22,900 --> 00:05:24,090
 So don't be afraid

286
00:05:24,090 --> 00:05:24,850
 of pushing,

287
00:05:24,850 --> 00:05:26,120
 publishing a library

288
00:05:26,120 --> 00:05:27,890
 to NPM, which is

289
00:05:27,890 --> 00:05:30,520
 just ES modules only.

290
00:05:30,520 --> 00:05:32,420
 And, yeah, basically

291
00:05:32,420 --> 00:05:34,080
 to start a -- I mean,

292
00:05:34,080 --> 00:05:34,240
 we saw

293
00:05:34,240 --> 00:05:34,990
 what it took to

294
00:05:34,990 --> 00:05:35,740
 start out with a

295
00:05:35,740 --> 00:05:36,880
 TypeScript project,

296
00:05:36,880 --> 00:05:37,900
 but for ES modules,

297
00:05:37,900 --> 00:05:38,780
 since it's Node

298
00:05:38,780 --> 00:05:40,630
 native, you can just

299
00:05:40,630 --> 00:05:42,380
 run NPM in it. Why,

300
00:05:42,380 --> 00:05:43,560
 of course.

301
00:05:43,560 --> 00:05:44,240
 Now to give you a

302
00:05:44,240 --> 00:05:45,020
 quick demo of what

303
00:05:45,020 --> 00:05:45,870
 the application --

304
00:05:45,870 --> 00:05:46,760
 the first version of

305
00:05:46,760 --> 00:05:47,590
 the application

306
00:05:47,590 --> 00:05:47,900
 actually

307
00:05:47,900 --> 00:05:49,130
 looks like. So

308
00:05:49,130 --> 00:05:50,520
 basically, I mean, I'm

309
00:05:50,520 --> 00:05:52,090
 using the OpenAI SDK,

310
00:05:52,090 --> 00:05:53,110
 of course. It's

311
00:05:53,110 --> 00:05:54,160
 actually really

312
00:05:54,160 --> 00:05:55,830
 good. It's an auto-generated

313
00:05:55,830 --> 00:05:56,740
 SDK based on their

314
00:05:56,740 --> 00:05:57,840
 APIs, so it's mostly

315
00:05:57,840 --> 00:05:58,760
 up-to-date. But

316
00:05:58,760 --> 00:06:00,200
 they haven't added GPT

317
00:06:00,200 --> 00:06:01,840
 4.0 mini to it yet

318
00:06:01,840 --> 00:06:03,140
 on the Type side. So

319
00:06:03,140 --> 00:06:04,000
 it's also sometimes

320
00:06:04,000 --> 00:06:04,400
 behind

321
00:06:04,400 --> 00:06:06,000
 unless they actually

322
00:06:06,000 --> 00:06:06,750
 run the SDK

323
00:06:06,750 --> 00:06:08,520
 generation process.

324
00:06:08,520 --> 00:06:09,670
 So yeah, a quick

325
00:06:09,670 --> 00:06:11,230
 explanation of what's

326
00:06:11,230 --> 00:06:12,620
 actually happening

327
00:06:12,620 --> 00:06:13,990
 here. It's actually

328
00:06:13,990 --> 00:06:14,270
 quite

329
00:06:14,270 --> 00:06:15,360
 straightforward.

330
00:06:15,360 --> 00:06:16,510
 I'm initializing a

331
00:06:16,510 --> 00:06:17,670
 new client based on

332
00:06:17,670 --> 00:06:19,120
 the OpenAI library.

333
00:06:19,120 --> 00:06:19,800
 In this case, it's

334
00:06:19,800 --> 00:06:20,260
 just picking

335
00:06:20,260 --> 00:06:21,590
 up the API key from

336
00:06:21,590 --> 00:06:22,670
 my environment

337
00:06:22,670 --> 00:06:24,220
 variables instead of

338
00:06:24,220 --> 00:06:25,600
 explicitly passing

339
00:06:25,600 --> 00:06:26,440
 it in. I'm

340
00:06:26,440 --> 00:06:27,080
 generating

341
00:06:27,080 --> 00:06:28,200
 a list of messages

342
00:06:28,200 --> 00:06:29,310
 here to pass to the

343
00:06:29,310 --> 00:06:30,820
 LLM. So a role in a

344
00:06:30,820 --> 00:06:32,800
 message is basically,

345
00:06:32,800 --> 00:06:33,440
 like,

346
00:06:33,440 --> 00:06:34,280
 what context is that

347
00:06:34,280 --> 00:06:35,080
 message being sent

348
00:06:35,080 --> 00:06:35,990
 in? Is it the user?

349
00:06:35,990 --> 00:06:36,880
 Is it the chatbot?

350
00:06:36,880 --> 00:06:37,760
 Or is it

351
00:06:37,760 --> 00:06:39,080
 like a system prompt?

352
00:06:39,080 --> 00:06:39,800
 Basically, you're

353
00:06:39,800 --> 00:06:40,560
 telling the LLM what

354
00:06:40,560 --> 00:06:41,380
 you want to do. So

355
00:06:41,380 --> 00:06:42,280
 in this case,

356
00:06:42,280 --> 00:06:43,410
 this is a prompt

357
00:06:43,410 --> 00:06:44,720
 that I built using

358
00:06:44,720 --> 00:06:46,290
 another LLM, of

359
00:06:46,290 --> 00:06:47,420
 course, because,

360
00:06:47,420 --> 00:06:48,540
 yeah, LLMs are

361
00:06:48,540 --> 00:06:49,680
 notoriously

362
00:06:49,680 --> 00:06:50,610
 difficult to give

363
00:06:50,610 --> 00:06:51,880
 the right prompts to.

364
00:06:51,880 --> 00:06:53,120
 So this basically

365
00:06:53,120 --> 00:06:54,730
 gives the users

366
00:06:54,730 --> 00:06:55,140
 command line

367
00:06:55,140 --> 00:06:56,250
 to the LLM. It gives

368
00:06:56,250 --> 00:06:57,490
 a negative prompt

369
00:06:57,490 --> 00:06:58,210
 saying that ignore

370
00:06:58,210 --> 00:06:59,320
 any pleasantries or

371
00:06:59,320 --> 00:07:00,000
 comments,

372
00:07:00,000 --> 00:07:01,090
 stuff like that. And

373
00:07:01,090 --> 00:07:01,950
 then it also gives

374
00:07:01,950 --> 00:07:02,990
 the user's operating

375
00:07:02,990 --> 00:07:04,460
 system to it. So it

376
00:07:04,460 --> 00:07:05,240
 tries

377
00:07:05,240 --> 00:07:05,840
 to make it as

378
00:07:05,840 --> 00:07:06,750
 operating system

379
00:07:06,750 --> 00:07:07,570
 independent as

380
00:07:07,570 --> 00:07:08,560
 possible. And we are

381
00:07:08,560 --> 00:07:09,200
 going to go towards

382
00:07:09,200 --> 00:07:10,200
 that.

383
00:07:10,200 --> 00:07:11,120
 And next, I'm

384
00:07:11,120 --> 00:07:12,500
 passing in the user

385
00:07:12,500 --> 00:07:13,830
 prompt manually for

386
00:07:13,830 --> 00:07:15,000
 now. So how can I

387
00:07:15,000 --> 00:07:16,340
 get my system specs?

388
00:07:16,340 --> 00:07:17,060
 That's what the

389
00:07:17,060 --> 00:07:17,900
 question we asked

390
00:07:17,900 --> 00:07:18,900
 before was. And I'm

391
00:07:18,900 --> 00:07:19,730
 just passing it in

392
00:07:19,730 --> 00:07:20,400
 here. And then

393
00:07:20,400 --> 00:07:21,490
 we are just getting

394
00:07:21,490 --> 00:07:22,740
 a completion from

395
00:07:22,740 --> 00:07:23,670
 the LLM and then

396
00:07:23,670 --> 00:07:25,120
 logging it. So let's

397
00:07:25,120 --> 00:07:25,360
 see how

398
00:07:25,360 --> 00:07:26,750
 this works. I can

399
00:07:26,750 --> 00:07:28,450
 simply do node slide1

400
00:07:28,450 --> 00:07:30,440
 index.mjs. Yeah, and

401
00:07:30,440 --> 00:07:32,100
 it, of course, gives

402
00:07:32,100 --> 00:07:33,180
 us the command

403
00:07:33,180 --> 00:07:34,600
 here in the content

404
00:07:34,600 --> 00:07:36,120
 file, content

405
00:07:36,120 --> 00:07:37,230
 property, which we

406
00:07:37,230 --> 00:07:39,080
 can use. And sorry,

407
00:07:39,080 --> 00:07:40,060
 I missed the

408
00:07:40,060 --> 00:07:41,250
 most important part,

409
00:07:41,250 --> 00:07:42,000
 which is the ES

410
00:07:42,000 --> 00:07:43,000
 modules bit. So

411
00:07:43,000 --> 00:07:43,930
 basically, in ES

412
00:07:43,930 --> 00:07:44,920
 modules, you can

413
00:07:44,920 --> 00:07:46,360
 import any types

414
00:07:46,360 --> 00:07:48,050
 from a TypeScript

415
00:07:48,050 --> 00:07:50,100
 file. So in this

416
00:07:50,100 --> 00:07:51,730
 case, you have to

417
00:07:51,730 --> 00:07:54,000
 import a TypeScript

418
00:07:54,000 --> 00:07:55,070
 file as an alias.

419
00:07:55,070 --> 00:07:55,800
 You have to do

420
00:07:55,800 --> 00:07:57,150
 something funky. You

421
00:07:57,150 --> 00:07:58,000
 have to do a type

422
00:07:58,000 --> 00:07:58,960
 def, then use

423
00:07:58,960 --> 00:08:00,260
 an import. So I'm

424
00:08:00,260 --> 00:08:02,950
 using import openai.openai.chatcompletion

425
00:08:02,950 --> 00:08:04,230
 message param, aliasing

426
00:08:04,230 --> 00:08:05,400
 it to chat message,

427
00:08:05,400 --> 00:08:05,440
 and

428
00:08:05,440 --> 00:08:06,820
 then using it to add

429
00:08:06,820 --> 00:08:07,940
 type safety to the

430
00:08:07,940 --> 00:08:09,560
 messages area here.

431
00:08:09,560 --> 00:08:10,580
 And I mean, I can

432
00:08:10,580 --> 00:08:11,440
 quickly show

433
00:08:11,440 --> 00:08:12,680
 you how it autocompletes.

434
00:08:12,680 --> 00:08:14,010
 So it autocompletes

435
00:08:14,010 --> 00:08:15,310
 to basically all of

436
00:08:15,310 --> 00:08:16,790
 the parameters being

437
00:08:16,790 --> 00:08:17,240
 imported

438
00:08:17,240 --> 00:08:18,520
 from openai. So in

439
00:08:18,520 --> 00:08:19,460
 this way, you can

440
00:08:19,460 --> 00:08:20,400
 add type safety to

441
00:08:20,400 --> 00:08:21,400
 your ESM component

442
00:08:21,400 --> 00:08:22,320
 without having

443
00:08:22,320 --> 00:08:24,600
 to do extra bits.

444
00:08:24,600 --> 00:08:25,510
 And since we are

445
00:08:25,510 --> 00:08:26,560
 using imports and

446
00:08:26,560 --> 00:08:27,570
 not requires, it

447
00:08:27,570 --> 00:08:28,370
 also automatically

448
00:08:28,370 --> 00:08:28,720
 imports

449
00:08:28,720 --> 00:08:29,970
 the types here. So

450
00:08:29,970 --> 00:08:31,360
 if you are using an

451
00:08:31,360 --> 00:08:33,150
 ESM import, then it

452
00:08:33,150 --> 00:08:34,870
 should automatically

453
00:08:34,870 --> 00:08:35,540
 import

454
00:08:35,540 --> 00:08:36,430
 the types without

455
00:08:36,430 --> 00:08:37,480
 having to explicitly

456
00:08:37,480 --> 00:08:38,640
 do that. But in this

457
00:08:38,640 --> 00:08:40,080
 case, of course, I'm

458
00:08:40,080 --> 00:08:40,560
 explicitly

459
00:08:40,560 --> 00:08:41,890
 typing this because

460
00:08:41,890 --> 00:08:42,890
 I want to ensure

461
00:08:42,890 --> 00:08:44,060
 that the messages

462
00:08:44,060 --> 00:08:45,220
 array here has the

463
00:08:45,220 --> 00:08:46,320
 type safety.

464
00:08:46,320 --> 00:08:47,360
 And of course, if

465
00:08:47,360 --> 00:08:48,270
 you try to add new

466
00:08:48,270 --> 00:08:49,000
 things, then it

467
00:08:49,000 --> 00:08:50,180
 tries to autocomplete

468
00:08:50,180 --> 00:08:51,000
 it for you.

469
00:08:51,000 --> 00:08:52,200
 So you can add a new

470
00:08:52,200 --> 00:08:53,680
 role with a specific

471
00:08:53,680 --> 00:08:54,850
 role name and stuff

472
00:08:54,850 --> 00:08:56,150
 like that. So yeah,

473
00:08:56,150 --> 00:08:56,400
 that's

474
00:08:56,400 --> 00:08:57,640
 the main benefit of

475
00:08:57,640 --> 00:08:58,920
 ESM and why I chose

476
00:08:58,920 --> 00:09:00,000
 to go with that, to

477
00:09:00,000 --> 00:09:01,580
 avoid a build step.

478
00:09:01,580 --> 00:09:03,050
 So the next problem

479
00:09:03,050 --> 00:09:04,860
 is that, yeah, oops,

480
00:09:04,860 --> 00:09:06,320
 I'm going, this is

481
00:09:06,320 --> 00:09:08,160
 going away too fast.

482
00:09:08,160 --> 00:09:09,480
 So yeah,

483
00:09:09,480 --> 00:09:10,030
 how do I add the

484
00:09:10,030 --> 00:09:10,940
 terminal bits? So

485
00:09:10,940 --> 00:09:12,130
 you have your simple

486
00:09:12,130 --> 00:09:13,260
 application right

487
00:09:13,260 --> 00:09:16,080
 now with just,

488
00:09:16,080 --> 00:09:16,660
 you know, it's a

489
00:09:16,660 --> 00:09:17,590
 node script, right?

490
00:09:17,590 --> 00:09:18,010
 It's not doing

491
00:09:18,010 --> 00:09:18,970
 anything special. It's

492
00:09:18,970 --> 00:09:19,480
 not exactly

493
00:09:19,480 --> 00:09:20,980
 a CLI tool. So how

494
00:09:20,980 --> 00:09:21,450
 do you add the

495
00:09:21,450 --> 00:09:22,180
 terminal bits like

496
00:09:22,180 --> 00:09:23,010
 reading from the

497
00:09:23,010 --> 00:09:23,920
 command line or

498
00:09:23,920 --> 00:09:24,950
 reading user input

499
00:09:24,950 --> 00:09:26,120
 and stuff like that?

500
00:09:26,120 --> 00:09:28,050
 So for doing that,

501
00:09:28,050 --> 00:09:29,700
 you use certain

502
00:09:29,700 --> 00:09:30,760
 tools, certain

503
00:09:30,760 --> 00:09:32,000
 libraries, just like

504
00:09:32,000 --> 00:09:32,820
 the JavaScript

505
00:09:32,820 --> 00:09:33,550
 ecosystem,

506
00:09:33,550 --> 00:09:34,300
 everything is a

507
00:09:34,300 --> 00:09:35,500
 library, npm install

508
00:09:35,500 --> 00:09:36,060
 away.

509
00:09:36,060 --> 00:09:37,140
 So there's commander

510
00:09:37,140 --> 00:09:38,090
 and inquirer, two

511
00:09:38,090 --> 00:09:39,060
 tools which you can

512
00:09:39,060 --> 00:09:40,410
 use. Commander is

513
00:09:40,410 --> 00:09:41,760
 used for creating

514
00:09:41,760 --> 00:09:42,640
 a nice CLI

515
00:09:42,640 --> 00:09:44,470
 experience around

516
00:09:44,470 --> 00:09:46,080
 your app. So you can

517
00:09:46,080 --> 00:09:47,290
 do things like

518
00:09:47,290 --> 00:09:48,320
 create new commands,

519
00:09:48,320 --> 00:09:49,660
 you can basically

520
00:09:49,660 --> 00:09:51,230
 add new commands,

521
00:09:51,230 --> 00:09:52,150
 accept certain

522
00:09:52,150 --> 00:09:53,550
 parameters, make

523
00:09:53,550 --> 00:09:55,120
 certain parameters

524
00:09:55,120 --> 00:09:55,890
 optional, stuff like

525
00:09:55,890 --> 00:09:56,820
 that. And inquirer

526
00:09:56,820 --> 00:09:57,750
 allows you to build

527
00:09:57,750 --> 00:09:58,250
 a nice user

528
00:09:58,250 --> 00:09:59,240
 interface, like a

529
00:09:59,240 --> 00:10:01,040
 prompt interface and

530
00:10:01,040 --> 00:10:02,030
 stuff like that,

531
00:10:02,030 --> 00:10:03,120
 which I had done

532
00:10:03,120 --> 00:10:04,520
 initially at the

533
00:10:04,520 --> 00:10:05,480
 start here with

534
00:10:05,480 --> 00:10:07,310
 my own tool. So in

535
00:10:07,310 --> 00:10:08,470
 this case, let's

536
00:10:08,470 --> 00:10:09,720
 have a look at how

537
00:10:09,720 --> 00:10:11,600
 it actually works.

538
00:10:11,600 --> 00:10:12,720
 So we'll only

539
00:10:12,720 --> 00:10:14,350
 look at commander

540
00:10:14,350 --> 00:10:15,550
 for now. To

541
00:10:15,550 --> 00:10:17,530
 initialize a new CLI

542
00:10:17,530 --> 00:10:19,550
 using commander, you

543
00:10:19,550 --> 00:10:20,960
 firstly import

544
00:10:20,960 --> 00:10:21,570
 command from

545
00:10:21,570 --> 00:10:22,570
 commander, which is

546
00:10:22,570 --> 00:10:23,500
 its base class, you

547
00:10:23,500 --> 00:10:24,570
 initialize it, and

548
00:10:24,570 --> 00:10:25,080
 then you can

549
00:10:25,080 --> 00:10:25,780
 pass it all of the

550
00:10:25,780 --> 00:10:26,640
 attributes that you

551
00:10:26,640 --> 00:10:27,640
 need to pass in here.

552
00:10:27,640 --> 00:10:28,380
 So in here, I'm

553
00:10:28,380 --> 00:10:28,920
 passing the

554
00:10:28,920 --> 00:10:30,130
 version of the CLI

555
00:10:30,130 --> 00:10:31,510
 tool and its

556
00:10:31,510 --> 00:10:32,450
 description. But if

557
00:10:32,450 --> 00:10:33,390
 you integrate it

558
00:10:33,390 --> 00:10:34,640
 into your product,

559
00:10:34,640 --> 00:10:35,600
 so it would look

560
00:10:35,600 --> 00:10:37,310
 something like this,

561
00:10:37,310 --> 00:10:38,240
 where you are using

562
00:10:38,240 --> 00:10:40,020
 program.argument. So

563
00:10:40,020 --> 00:10:40,680
 this is

564
00:10:40,680 --> 00:10:41,870
 the syntax for

565
00:10:41,870 --> 00:10:43,540
 adding a new sort of

566
00:10:43,540 --> 00:10:45,480
 command to your tool.

567
00:10:45,480 --> 00:10:46,340
 So you can add an

568
00:10:46,340 --> 00:10:47,040
 argument,

569
00:10:47,040 --> 00:10:48,090
 which is a query,

570
00:10:48,090 --> 00:10:48,580
 you add a

571
00:10:48,580 --> 00:10:49,770
 description to that

572
00:10:49,770 --> 00:10:51,050
 query, and then you

573
00:10:51,050 --> 00:10:51,920
 add in an action

574
00:10:51,920 --> 00:10:53,160
 which happens when

575
00:10:53,160 --> 00:10:54,210
 that query gets

576
00:10:54,210 --> 00:10:55,300
 passed in. So if

577
00:10:55,300 --> 00:10:56,230
 someone misses a

578
00:10:56,230 --> 00:10:56,810
 query, it

579
00:10:56,810 --> 00:10:57,720
 automatically

580
00:10:57,720 --> 00:10:58,730
 also does input

581
00:10:58,730 --> 00:11:00,120
 handling for you, so

582
00:11:00,120 --> 00:11:01,410
 it's sort of like XOR

583
00:11:01,410 --> 00:11:03,120
 for your CLI. And I'll

584
00:11:03,120 --> 00:11:03,320
 give

585
00:11:03,320 --> 00:11:04,940
 a quick demo of how

586
00:11:04,940 --> 00:11:07,190
 this works as well.

587
00:11:07,190 --> 00:11:08,230
 So we can do

588
00:11:08,230 --> 00:11:10,180
 something like node

589
00:11:10,180 --> 00:11:12,880
 cli2/final.mjs.

590
00:11:12,880 --> 00:11:13,970
 In this case, I am

591
00:11:13,970 --> 00:11:14,950
 taking the query

592
00:11:14,950 --> 00:11:16,370
 from the CLI, though,

593
00:11:16,370 --> 00:11:17,360
 so let's see what

594
00:11:17,360 --> 00:11:18,080
 happens if

595
00:11:18,080 --> 00:11:19,070
 I don't pass in the

596
00:11:19,070 --> 00:11:20,150
 query. I think it

597
00:11:20,150 --> 00:11:21,340
 should not, it will

598
00:11:21,340 --> 00:11:22,190
 still not fail in

599
00:11:22,190 --> 00:11:23,160
 this case because

600
00:11:23,160 --> 00:11:24,090
 an empty string will

601
00:11:24,090 --> 00:11:25,180
 be passed, but there's

602
00:11:25,180 --> 00:11:26,050
 only one way to find

603
00:11:26,050 --> 00:11:27,040
 out. So okay, yeah,

604
00:11:27,040 --> 00:11:27,040
 it

605
00:11:27,040 --> 00:11:28,040
 actually errors out.

606
00:11:28,040 --> 00:11:28,960
 So it does input

607
00:11:28,960 --> 00:11:30,110
 validation for us,

608
00:11:30,110 --> 00:11:31,250
 mainly it allows us

609
00:11:31,250 --> 00:11:32,240
 to avoid passing

610
00:11:32,240 --> 00:11:33,450
 in the wrong query,

611
00:11:33,450 --> 00:11:34,590
 and I think the help

612
00:11:34,590 --> 00:11:35,820
 command should work

613
00:11:35,820 --> 00:11:37,070
 as well. Yeah, so if

614
00:11:37,070 --> 00:11:37,600
 you run the

615
00:11:37,600 --> 00:11:38,430
 help command, then

616
00:11:38,430 --> 00:11:39,270
 it prints out all of

617
00:11:39,270 --> 00:11:40,010
 the things that you

618
00:11:40,010 --> 00:11:40,800
 had passed in in the

619
00:11:40,800 --> 00:11:41,320
 program.

620
00:11:41,320 --> 00:11:42,470
 So commander allows,

621
00:11:42,470 --> 00:11:43,610
 I mean, it just, it's

622
00:11:43,610 --> 00:11:44,150
 just a nice

623
00:11:44,150 --> 00:11:45,120
 experience to work

624
00:11:45,120 --> 00:11:45,760
 with while

625
00:11:45,760 --> 00:11:48,400
 building a new CLI.

626
00:11:48,400 --> 00:11:49,160
 And yeah, so how

627
00:11:49,160 --> 00:11:50,050
 would this actually

628
00:11:50,050 --> 00:11:50,970
 work if I manually

629
00:11:50,970 --> 00:11:51,400
 pass in a

630
00:11:51,400 --> 00:11:52,590
 command here? So I

631
00:11:52,590 --> 00:11:53,590
 can ask something

632
00:11:53,590 --> 00:11:54,590
 like list files in

633
00:11:54,590 --> 00:11:55,790
 current directory,

634
00:11:55,790 --> 00:11:56,480
 maybe. I

635
00:11:56,480 --> 00:11:57,490
 mean, of course, we

636
00:11:57,490 --> 00:11:58,310
 all know it's LS,

637
00:11:58,310 --> 00:11:59,360
 but we want to make

638
00:11:59,360 --> 00:11:59,980
 sure that our tool

639
00:11:59,980 --> 00:12:00,640
 is actually

640
00:12:00,640 --> 00:12:02,490
 working. So yeah, in

641
00:12:02,490 --> 00:12:03,870
 this case, it

642
00:12:03,870 --> 00:12:05,360
 returns LS. I don't

643
00:12:05,360 --> 00:12:05,990
 know what the extra

644
00:12:05,990 --> 00:12:06,400
 stuff being

645
00:12:06,400 --> 00:12:07,350
 passed in there is,

646
00:12:07,350 --> 00:12:08,080
 but it's mainly

647
00:12:08,080 --> 00:12:09,100
 because our prompt

648
00:12:09,100 --> 00:12:09,720
 is quite simple

649
00:12:09,720 --> 00:12:10,560
 right now, but

650
00:12:10,560 --> 00:12:11,900
 we can fix that

651
00:12:11,900 --> 00:12:13,860
 later. So right now,

652
00:12:13,860 --> 00:12:14,760
 yeah, we've got a

653
00:12:14,760 --> 00:12:15,700
 CLI tool, it accepts

654
00:12:15,700 --> 00:12:16,160
 a parameter

655
00:12:16,160 --> 00:12:17,230
 and based on that,

656
00:12:17,230 --> 00:12:18,170
 it's giving some

657
00:12:18,170 --> 00:12:19,580
 form of output. But

658
00:12:19,580 --> 00:12:20,220
 there's certain

659
00:12:20,220 --> 00:12:20,960
 things missing

660
00:12:20,960 --> 00:12:22,320
 here, of course. So

661
00:12:22,320 --> 00:12:23,930
 yeah, let's try to

662
00:12:23,930 --> 00:12:25,860
 deploy this. This is

663
00:12:25,860 --> 00:12:27,590
 something, this is

664
00:12:27,590 --> 00:12:28,580
 just a node

665
00:12:28,580 --> 00:12:29,630
 script right now,

666
00:12:29,630 --> 00:12:30,740
 right? We haven't

667
00:12:30,740 --> 00:12:31,920
 yet installed this

668
00:12:31,920 --> 00:12:32,650
 to our computer

669
00:12:32,650 --> 00:12:33,690
 using npm yet. So

670
00:12:33,690 --> 00:12:33,840
 let's

671
00:12:33,840 --> 00:12:34,900
 try to do that and

672
00:12:34,900 --> 00:12:36,470
 see what happens. So

673
00:12:36,470 --> 00:12:38,980
 what I can do is,

674
00:12:38,980 --> 00:12:42,080
 yeah, in this case,

675
00:12:42,080 --> 00:12:43,400
 in index.js

676
00:12:43,400 --> 00:12:44,590
 in slide three here,

677
00:12:44,590 --> 00:12:45,550
 it's the same file

678
00:12:45,550 --> 00:12:47,100
 that we were seeing

679
00:12:47,100 --> 00:12:47,790
 previously. I will

680
00:12:47,790 --> 00:12:48,480
 try to install

681
00:12:48,480 --> 00:12:50,110
 that now. So it's

682
00:12:50,110 --> 00:12:52,160
 actually very simple.

683
00:12:52,160 --> 00:12:53,990
 So to convert an npm

684
00:12:53,990 --> 00:12:55,820
 package into a CLI

685
00:12:55,820 --> 00:12:56,440
 is very

686
00:12:56,440 --> 00:12:58,190
 simple. You just add

687
00:12:58,190 --> 00:12:59,480
 a bin property to

688
00:12:59,480 --> 00:13:01,320
 your package.json,

689
00:13:01,320 --> 00:13:02,810
 and then you add the

690
00:13:02,810 --> 00:13:03,440
 name of

691
00:13:03,440 --> 00:13:04,290
 the command that you

692
00:13:04,290 --> 00:13:04,990
 want to use, and

693
00:13:04,990 --> 00:13:05,580
 then you add an

694
00:13:05,580 --> 00:13:06,560
 entry file for that.

695
00:13:06,560 --> 00:13:07,000
 So in this

696
00:13:07,000 --> 00:13:08,440
 case, the command I

697
00:13:08,440 --> 00:13:09,790
 want to use is how,

698
00:13:09,790 --> 00:13:11,130
 and the entry I want

699
00:13:11,130 --> 00:13:12,170
 to use is maybe

700
00:13:12,170 --> 00:13:13,980
 slide3/index.mjs.

701
00:13:13,980 --> 00:13:15,790
 And then, yeah, let's

702
00:13:15,790 --> 00:13:17,220
 try to install this

703
00:13:17,220 --> 00:13:18,840
 globally. So if I do

704
00:13:18,840 --> 00:13:20,190
 npm in -j, I think

705
00:13:20,190 --> 00:13:20,600
 that

706
00:13:20,600 --> 00:13:23,160
 was before. Yeah, I

707
00:13:23,160 --> 00:13:25,120
 just need to sudo

708
00:13:25,120 --> 00:13:27,060
 that, and then add

709
00:13:27,060 --> 00:13:29,260
 my password in. So

710
00:13:29,260 --> 00:13:29,840
 now if I try

711
00:13:29,840 --> 00:13:31,380
 to run how do I

712
00:13:31,380 --> 00:13:33,930
 maybe list my files,

713
00:13:33,930 --> 00:13:36,330
 then, okay, we are

714
00:13:36,330 --> 00:13:38,600
 actually getting a

715
00:13:38,600 --> 00:13:40,400
 really random

716
00:13:40,400 --> 00:13:41,920
 error, which is the

717
00:13:41,920 --> 00:13:43,320
 third problem that

718
00:13:43,320 --> 00:13:45,000
 we are facing, that,

719
00:13:45,000 --> 00:13:46,510
 yeah, this is being

720
00:13:46,510 --> 00:13:47,240
 treated

721
00:13:47,240 --> 00:13:48,680
 as bash. So as you

722
00:13:48,680 --> 00:13:49,920
 can see here, the

723
00:13:49,920 --> 00:13:51,320
 CLI itself, while

724
00:13:51,320 --> 00:13:52,630
 trying to run that

725
00:13:52,630 --> 00:13:54,200
 binary, is trying

726
00:13:54,200 --> 00:13:54,760
 to run the

727
00:13:54,760 --> 00:13:55,950
 JavaScript file as a

728
00:13:55,950 --> 00:13:57,190
 bash file, or like a

729
00:13:57,190 --> 00:13:58,460
 shell script file.

730
00:13:58,460 --> 00:14:00,400
 And so it returns

731
00:14:00,400 --> 00:14:01,700
 a random image magic

732
00:14:01,700 --> 00:14:03,120
 error in this case.

733
00:14:03,120 --> 00:14:04,170
 So how do we make it

734
00:14:04,170 --> 00:14:05,310
 treat JavaScript

735
00:14:05,310 --> 00:14:05,800
 files as

736
00:14:05,800 --> 00:14:06,630
 JavaScript files

737
00:14:06,630 --> 00:14:07,530
 while running them

738
00:14:07,530 --> 00:14:08,390
 from the CLI rather

739
00:14:08,390 --> 00:14:09,210
 than, you know,

740
00:14:09,210 --> 00:14:10,000
 trying to parse

741
00:14:10,000 --> 00:14:11,830
 it via bash or zsh

742
00:14:11,830 --> 00:14:14,160
 or whatever. So the

743
00:14:14,160 --> 00:14:16,410
 solution is to add a

744
00:14:16,410 --> 00:14:18,670
 shabang. So the shabang

745
00:14:18,670 --> 00:14:18,980
 that we

746
00:14:18,980 --> 00:14:20,280
 add here is

747
00:14:20,280 --> 00:14:22,150
 basically a shabang

748
00:14:22,150 --> 00:14:24,340
 user binenv node, so

749
00:14:24,340 --> 00:14:26,550
 it uses the user's

750
00:14:26,550 --> 00:14:28,120
 node environment

751
00:14:28,120 --> 00:14:29,310
 to run that specific

752
00:14:29,310 --> 00:14:30,730
 file. And this is a

753
00:14:30,730 --> 00:14:32,170
 very simple solution,

754
00:14:32,170 --> 00:14:33,100
 so it just adds a

755
00:14:33,100 --> 00:14:33,680
 new line

756
00:14:33,680 --> 00:14:35,150
 in the line up there,

757
00:14:35,150 --> 00:14:36,320
 and now it should

758
00:14:36,320 --> 00:14:37,520
 run for us. So to

759
00:14:37,520 --> 00:14:38,740
 quickly test this

760
00:14:38,740 --> 00:14:40,480
 out, sorry,

761
00:14:40,480 --> 00:14:42,440
 do you want me to go

762
00:14:42,440 --> 00:14:44,350
 there? Okay. Cool.

763
00:14:44,350 --> 00:14:45,610
 So, yeah, to quickly

764
00:14:45,610 --> 00:14:46,780
 test this out, we

765
00:14:46,780 --> 00:14:47,560
 can npm

766
00:14:47,560 --> 00:14:48,920
 install that again.

767
00:14:48,920 --> 00:14:49,960
 And now if we run

768
00:14:49,960 --> 00:14:51,160
 the how command,

769
00:14:51,160 --> 00:14:53,200
 then this time it

770
00:14:53,200 --> 00:14:56,000
 works, because

771
00:14:56,000 --> 00:14:57,320
 your command line

772
00:14:57,320 --> 00:14:58,990
 emulator, I guess

773
00:14:58,990 --> 00:14:59,700
 command line

774
00:14:59,700 --> 00:15:01,110
 emulator knows how

775
00:15:01,110 --> 00:15:02,680
 to treat that file.

776
00:15:02,680 --> 00:15:03,710
 So it knows to treat

777
00:15:03,710 --> 00:15:04,960
 that file as a node.js

778
00:15:04,960 --> 00:15:06,080
 file, and that's why

779
00:15:06,080 --> 00:15:06,960
 it's able to work

780
00:15:06,960 --> 00:15:07,360
 fine

781
00:15:07,360 --> 00:15:08,280
 this time. I'm sure

782
00:15:08,280 --> 00:15:08,910
 that I used the

783
00:15:08,910 --> 00:15:09,750
 wrong terminology

784
00:15:09,750 --> 00:15:10,630
 there, and someone

785
00:15:10,630 --> 00:15:11,280
 will correct

786
00:15:11,280 --> 00:15:14,410
 me later. And

787
00:15:14,410 --> 00:15:15,430
 problem four, so how

788
00:15:15,430 --> 00:15:16,840
 to make this crossOS

789
00:15:16,840 --> 00:15:17,800
 compatible. So right

790
00:15:17,800 --> 00:15:18,200
 now you

791
00:15:18,200 --> 00:15:19,560
 saw that we are

792
00:15:19,560 --> 00:15:21,380
 injecting into the

793
00:15:21,380 --> 00:15:23,080
 prompt that it has

794
00:15:23,080 --> 00:15:24,780
 to be, like it has

795
00:15:24,780 --> 00:15:26,240
 to return data

796
00:15:26,240 --> 00:15:27,320
 in zsh and for a Mac

797
00:15:27,320 --> 00:15:28,380
 OS device, but we

798
00:15:28,380 --> 00:15:29,620
 can, for example,

799
00:15:29,620 --> 00:15:31,080
 use something else.

800
00:15:31,080 --> 00:15:31,320
 Like, for

801
00:15:31,320 --> 00:15:32,420
 example, I might

802
00:15:32,420 --> 00:15:33,150
 want to use a

803
00:15:33,150 --> 00:15:34,330
 Windows laptop and

804
00:15:34,330 --> 00:15:35,290
 PowerShell or a

805
00:15:35,290 --> 00:15:36,470
 Windows laptop and

806
00:15:36,470 --> 00:15:36,860
 bash

807
00:15:36,860 --> 00:15:37,690
 as well, because

808
00:15:37,690 --> 00:15:38,480
 that's possible,

809
00:15:38,480 --> 00:15:39,780
 right? So the way

810
00:15:39,780 --> 00:15:41,460
 you would do that is

811
00:15:41,460 --> 00:15:42,680
 read the user's

812
00:15:42,680 --> 00:15:44,170
 environment. In

813
00:15:44,170 --> 00:15:45,680
 JavaScript, it's

814
00:15:45,680 --> 00:15:47,040
 super simple to do

815
00:15:47,040 --> 00:15:48,590
 that. You can use

816
00:15:48,590 --> 00:15:50,560
 process.env.shell,

817
00:15:50,560 --> 00:15:52,460
 which allows you to

818
00:15:52,460 --> 00:15:53,230
 import the user's

819
00:15:53,230 --> 00:15:54,620
 current execution

820
00:15:54,620 --> 00:15:56,290
 environment, so that

821
00:15:56,290 --> 00:15:57,800
 might be PowerShell

822
00:15:57,800 --> 00:15:59,420
 or bash scripts or

823
00:15:59,420 --> 00:16:01,100
 whatever. And then

824
00:16:01,100 --> 00:16:02,500
 you can get their

825
00:16:02,500 --> 00:16:04,010
 operating system

826
00:16:04,010 --> 00:16:05,240
 from platform

827
00:16:05,240 --> 00:16:06,490
 here. So if I

828
00:16:06,490 --> 00:16:07,080
 highlight on

829
00:16:07,080 --> 00:16:08,030
 platform, it shows a

830
00:16:08,030 --> 00:16:08,760
 list of all of the

831
00:16:08,760 --> 00:16:10,160
 possible values here.

832
00:16:10,160 --> 00:16:10,910
 And if I highlight

833
00:16:10,910 --> 00:16:11,660
 on shell, I think

834
00:16:11,660 --> 00:16:12,360
 shell itself is a

835
00:16:12,360 --> 00:16:13,340
 string, because

836
00:16:13,340 --> 00:16:13,760
 there are a lot

837
00:16:13,760 --> 00:16:15,360
 of environments out

838
00:16:15,360 --> 00:16:15,870
 there. And

839
00:16:15,870 --> 00:16:17,490
 interestingly enough,

840
00:16:17,490 --> 00:16:18,840
 this is super useful

841
00:16:18,840 --> 00:16:19,480
 if you're trying

842
00:16:19,480 --> 00:16:20,630
 to execute custom

843
00:16:20,630 --> 00:16:21,610
 code in a user's

844
00:16:21,610 --> 00:16:23,060
 environment. So in

845
00:16:23,060 --> 00:16:24,280
 my case, since I'm

846
00:16:24,280 --> 00:16:25,600
 executing commands,

847
00:16:25,600 --> 00:16:26,250
 I want to use the

848
00:16:26,250 --> 00:16:27,110
 right tool. I want

849
00:16:27,110 --> 00:16:27,810
 to use zsh or bash

850
00:16:27,810 --> 00:16:28,670
 or whatever the user

851
00:16:28,670 --> 00:16:29,360
 is executing

852
00:16:29,360 --> 00:16:30,420
 the command from,

853
00:16:30,420 --> 00:16:31,380
 and not any other

854
00:16:31,380 --> 00:16:32,330
 random tool which

855
00:16:32,330 --> 00:16:33,600
 might not be present

856
00:16:33,600 --> 00:16:34,280
 on the user's

857
00:16:34,280 --> 00:16:36,800
 operating system. So

858
00:16:36,800 --> 00:16:38,210
 if we modify the

859
00:16:38,210 --> 00:16:40,440
 command using that,

860
00:16:40,440 --> 00:16:41,110
 then we simply

861
00:16:41,110 --> 00:16:41,760
 inject those

862
00:16:41,760 --> 00:16:42,320
 variables

863
00:16:42,320 --> 00:16:43,660
 here. So after

864
00:16:43,660 --> 00:16:44,500
 importing shell, we

865
00:16:44,500 --> 00:16:45,070
 can just import

866
00:16:45,070 --> 00:16:46,260
 shell. So we say you're

867
00:16:46,260 --> 00:16:46,920
 an AI system

868
00:16:46,920 --> 00:16:48,000
 that only responds

869
00:16:48,000 --> 00:16:49,080
 with shell command

870
00:16:49,080 --> 00:16:50,080
 line instructions

871
00:16:50,080 --> 00:16:51,520
 for the OS platform.

872
00:16:51,520 --> 00:16:51,860
 And then

873
00:16:51,860 --> 00:16:52,800
 using that, our

874
00:16:52,800 --> 00:16:53,620
 prompt then is

875
00:16:53,620 --> 00:16:54,520
 automatically

876
00:16:54,520 --> 00:16:55,350
 customized to

877
00:16:55,350 --> 00:16:56,520
 whatever operating

878
00:16:56,520 --> 00:16:57,240
 system and

879
00:16:57,240 --> 00:16:58,490
 shell environment

880
00:16:58,490 --> 00:16:59,480
 that the user is

881
00:16:59,480 --> 00:17:00,660
 running the prompt

882
00:17:00,660 --> 00:17:01,620
 in. So of course, I'm

883
00:17:01,620 --> 00:17:01,920
 not going

884
00:17:01,920 --> 00:17:02,960
 to run this one

885
00:17:02,960 --> 00:17:04,510
 again, because it's

886
00:17:04,510 --> 00:17:04,940
 quite

887
00:17:04,940 --> 00:17:07,060
 straightforward. And

888
00:17:07,060 --> 00:17:09,870
 yeah, finally, so

889
00:17:09,870 --> 00:17:11,240
 relative

890
00:17:11,240 --> 00:17:13,140
 imports are sort of

891
00:17:13,140 --> 00:17:14,350
 bought. And this is

892
00:17:14,350 --> 00:17:16,060
 a problem which isn't

893
00:17:16,060 --> 00:17:17,380
 exactly unique to

894
00:17:17,380 --> 00:17:19,280
 CLI tools. It's

895
00:17:19,280 --> 00:17:20,420
 unique to anything

896
00:17:20,420 --> 00:17:21,690
 which is installed

897
00:17:21,690 --> 00:17:22,900
 in your node modules,

898
00:17:22,900 --> 00:17:24,100
 but wants to access

899
00:17:24,100 --> 00:17:24,840
 a file which

900
00:17:24,840 --> 00:17:26,660
 might be present in

901
00:17:26,660 --> 00:17:28,650
 a relative path-- I

902
00:17:28,650 --> 00:17:30,320
 guess, relative to

903
00:17:30,320 --> 00:17:31,780
 the node module

904
00:17:31,780 --> 00:17:34,360
 itself. So I'll

905
00:17:34,360 --> 00:17:36,230
 explain how. So the

906
00:17:36,230 --> 00:17:37,000
 ideal solution to

907
00:17:37,000 --> 00:17:38,120
 this would be to use

908
00:17:38,120 --> 00:17:39,340
 some path magic. So

909
00:17:39,340 --> 00:17:39,600
 you would

910
00:17:39,600 --> 00:17:40,150
 be able to use

911
00:17:40,150 --> 00:17:40,650
 underscore

912
00:17:40,650 --> 00:17:41,500
 underscore dirname

913
00:17:41,500 --> 00:17:42,180
 and stuff like that

914
00:17:42,180 --> 00:17:43,050
 to get the current

915
00:17:43,050 --> 00:17:43,520
 directory

916
00:17:43,520 --> 00:17:44,430
 that the file is

917
00:17:44,430 --> 00:17:45,400
 being currently

918
00:17:45,400 --> 00:17:46,740
 called from. And in

919
00:17:46,740 --> 00:17:48,170
 this case, I'll show

920
00:17:48,170 --> 00:17:49,120
 you why it might

921
00:17:49,120 --> 00:17:50,360
 not work in ES

922
00:17:50,360 --> 00:17:52,900
 modules. So for ES

923
00:17:52,900 --> 00:17:54,860
 modules-- so firstly,

924
00:17:54,860 --> 00:17:55,780
 let's try to use

925
00:17:55,780 --> 00:17:56,600
 relative imports

926
00:17:56,600 --> 00:17:57,900
 directly. For

927
00:17:57,900 --> 00:17:59,230
 example, if I want

928
00:17:59,230 --> 00:18:00,740
 to-- instead of

929
00:18:00,740 --> 00:18:01,920
 having to read the

930
00:18:01,920 --> 00:18:03,230
 data twice, so

931
00:18:03,230 --> 00:18:04,000
 instead

932
00:18:04,000 --> 00:18:04,970
 of having to write

933
00:18:04,970 --> 00:18:05,810
 what the user's

934
00:18:05,810 --> 00:18:07,010
 version was and what

935
00:18:07,010 --> 00:18:07,940
 the description of

936
00:18:07,940 --> 00:18:08,640
 the package

937
00:18:08,640 --> 00:18:09,710
 is twice, once in

938
00:18:09,710 --> 00:18:11,010
 the index.mjs file

939
00:18:11,010 --> 00:18:11,950
 here and once in

940
00:18:11,950 --> 00:18:13,480
 package.json, I can

941
00:18:13,480 --> 00:18:14,320
 deduplicate

942
00:18:14,320 --> 00:18:15,250
 it by reading it

943
00:18:15,250 --> 00:18:17,070
 from package.json

944
00:18:17,070 --> 00:18:17,930
 directly. So you

945
00:18:17,930 --> 00:18:18,980
 might think that you

946
00:18:18,980 --> 00:18:19,960
 can use import

947
00:18:19,960 --> 00:18:21,290
 package from package.json

948
00:18:21,290 --> 00:18:22,090
 directly, but ES

949
00:18:22,090 --> 00:18:22,890
 modules kind of

950
00:18:22,890 --> 00:18:23,750
 makes it difficult,

951
00:18:23,750 --> 00:18:24,320
 but that's

952
00:18:24,320 --> 00:18:25,900
 beyond the scope of

953
00:18:25,900 --> 00:18:26,860
 this talk. Another

954
00:18:26,860 --> 00:18:27,770
 solution you might

955
00:18:27,770 --> 00:18:28,520
 think of is using

956
00:18:28,520 --> 00:18:29,360
 JSON.parse and

957
00:18:29,360 --> 00:18:30,340
 then using read file

958
00:18:30,340 --> 00:18:31,420
 sync. So that's what

959
00:18:31,420 --> 00:18:32,380
 we're going to try

960
00:18:32,380 --> 00:18:33,230
 to do right now, and

961
00:18:33,230 --> 00:18:33,640
 then

962
00:18:33,640 --> 00:18:34,570
 I'll explain why

963
00:18:34,570 --> 00:18:35,880
 that might not work.

964
00:18:35,880 --> 00:18:38,060
 So once we do that,

965
00:18:38,060 --> 00:18:40,420
 let's try to install

966
00:18:40,420 --> 00:18:41,280
 it first.

967
00:18:41,280 --> 00:18:43,180
 So yeah, I go to

968
00:18:43,180 --> 00:18:45,870
 package.json again,

969
00:18:45,870 --> 00:18:50,060
 and then I do slide5/index.mjs,

970
00:18:50,060 --> 00:18:51,790
 and then I can do

971
00:18:51,790 --> 00:18:52,480
 sudo

972
00:18:52,480 --> 00:18:54,640
 npm install.globally.

973
00:18:54,640 --> 00:18:55,990
 And then if I try to

974
00:18:55,990 --> 00:18:57,440
 run how, then it

975
00:18:57,440 --> 00:18:58,600
 should throw me an

976
00:18:58,600 --> 00:18:59,360
 error.

977
00:18:59,360 --> 00:19:00,210
 Oh, it actually

978
00:19:00,210 --> 00:19:01,420
 works. I think that's

979
00:19:01,420 --> 00:19:02,030
 because I'm

980
00:19:02,030 --> 00:19:02,990
 executing from the

981
00:19:02,990 --> 00:19:04,040
 context of the root

982
00:19:04,040 --> 00:19:04,840
 directory, which

983
00:19:04,840 --> 00:19:05,390
 already has a

984
00:19:05,390 --> 00:19:06,480
 package.json here.

985
00:19:06,480 --> 00:19:07,130
 So relative to my

986
00:19:07,130 --> 00:19:07,920
 current path, I do

987
00:19:07,920 --> 00:19:09,190
 have a package.json.

988
00:19:09,190 --> 00:19:09,910
 But if I was in a

989
00:19:09,910 --> 00:19:10,900
 different file, so

990
00:19:10,900 --> 00:19:11,770
 if I went directly

991
00:19:11,770 --> 00:19:12,640
 up, and if I tried

992
00:19:12,640 --> 00:19:13,450
 to run that command

993
00:19:13,450 --> 00:19:14,230
 again, I think it

994
00:19:14,230 --> 00:19:14,940
 should throw the

995
00:19:14,940 --> 00:19:16,010
 error now. So yes,

996
00:19:16,010 --> 00:19:16,800
 now in this case

997
00:19:16,800 --> 00:19:17,420
 it says that no

998
00:19:17,420 --> 00:19:18,040
 search file or

999
00:19:18,040 --> 00:19:18,820
 directory, open

1000
00:19:18,820 --> 00:19:19,620
 package.json,

1001
00:19:19,620 --> 00:19:20,400
 because as you can

1002
00:19:20,400 --> 00:19:21,040
 see here,

1003
00:19:21,040 --> 00:19:22,510
 it's trying to read

1004
00:19:22,510 --> 00:19:23,980
 it from relative to

1005
00:19:23,980 --> 00:19:25,940
 the current path. So

1006
00:19:25,940 --> 00:19:27,930
 again, if you've

1007
00:19:27,930 --> 00:19:28,520
 worked with

1008
00:19:28,520 --> 00:19:29,450
 Node.js in the past,

1009
00:19:29,450 --> 00:19:30,110
 you would assume

1010
00:19:30,110 --> 00:19:31,020
 that something like

1011
00:19:31,020 --> 00:19:31,400
 underscore

1012
00:19:31,400 --> 00:19:32,280
 underscore dirname

1013
00:19:32,280 --> 00:19:34,270
 would work. So let's

1014
00:19:34,270 --> 00:19:36,040
 try to do that. So I

1015
00:19:36,040 --> 00:19:37,800
 would do something

1016
00:19:37,800 --> 00:19:39,230
 like underscore

1017
00:19:39,230 --> 00:19:39,840
 underscore

1018
00:19:39,840 --> 00:19:40,820
 dirname, which

1019
00:19:40,820 --> 00:19:41,910
 actually returns the

1020
00:19:41,910 --> 00:19:42,980
 current directory

1021
00:19:42,980 --> 00:19:43,910
 name when you are

1022
00:19:43,910 --> 00:19:45,240
 using proper Node.js

1023
00:19:45,240 --> 00:19:46,540
 without ES modules,

1024
00:19:46,540 --> 00:19:47,640
 I guess. And if I

1025
00:19:47,640 --> 00:19:48,720
 try to install this

1026
00:19:48,720 --> 00:19:49,900
 now, I'll have to cd

1027
00:19:49,900 --> 00:19:50,120
 into

1028
00:19:50,120 --> 00:19:51,760
 the directory again,

1029
00:19:51,760 --> 00:19:53,230
 and then npm install

1030
00:19:53,230 --> 00:19:54,160
 this, go up a

1031
00:19:54,160 --> 00:19:55,800
 directory again, and

1032
00:19:55,800 --> 00:19:56,960
 try to--

1033
00:19:56,960 --> 00:19:58,420
 oops, sorry. Run

1034
00:19:58,420 --> 00:19:59,970
 that command. So in

1035
00:19:59,970 --> 00:20:01,540
 this case, yeah, it

1036
00:20:01,540 --> 00:20:02,920
 says dirname is not

1037
00:20:02,920 --> 00:20:03,640
 defined

1038
00:20:03,640 --> 00:20:04,670
 in ES module scope.

1039
00:20:04,670 --> 00:20:05,420
 So we are sort of

1040
00:20:05,420 --> 00:20:06,320
 shooting ourselves

1041
00:20:06,320 --> 00:20:07,130
 in the foot here by

1042
00:20:07,130 --> 00:20:08,000
 using ES modules

1043
00:20:08,000 --> 00:20:08,600
 a little bit,

1044
00:20:08,600 --> 00:20:09,280
 because a lot of the

1045
00:20:09,280 --> 00:20:10,060
 things that you just

1046
00:20:10,060 --> 00:20:10,790
 took for granted in

1047
00:20:10,790 --> 00:20:11,280
 Node.js

1048
00:20:11,280 --> 00:20:12,150
 are no longer

1049
00:20:12,150 --> 00:20:13,500
 present. So the

1050
00:20:13,500 --> 00:20:15,090
 solution for this is

1051
00:20:15,090 --> 00:20:16,380
 actually using

1052
00:20:16,380 --> 00:20:18,230
 import.meta.url

1053
00:20:18,230 --> 00:20:19,320
 instead.

1054
00:20:19,320 --> 00:20:20,530
 So I like to think

1055
00:20:20,530 --> 00:20:21,660
 that ES modules

1056
00:20:21,660 --> 00:20:23,440
 treat every file you're

1057
00:20:23,440 --> 00:20:24,450
 using, like a

1058
00:20:24,450 --> 00:20:25,880
 browser JavaScript

1059
00:20:25,880 --> 00:20:27,270
 file. So in that

1060
00:20:27,270 --> 00:20:28,450
 case, every file

1061
00:20:28,450 --> 00:20:30,010
 itself has a URL. In

1062
00:20:30,010 --> 00:20:31,030
 this case, the URL

1063
00:20:31,030 --> 00:20:31,740
 for the file

1064
00:20:31,740 --> 00:20:32,740
 would be the file

1065
00:20:32,740 --> 00:20:33,960
 path, which points

1066
00:20:33,960 --> 00:20:35,110
 to that particular

1067
00:20:35,110 --> 00:20:38,120
 file. And you can

1068
00:20:38,120 --> 00:20:40,880
 use the path

1069
00:20:40,880 --> 00:20:42,740
 library from Node.js

1070
00:20:42,740 --> 00:20:44,210
 itself to convert

1071
00:20:44,210 --> 00:20:45,740
 that URL path into

1072
00:20:45,740 --> 00:20:47,190
 file path. So file

1073
00:20:47,190 --> 00:20:48,040
 URI to path,

1074
00:20:48,040 --> 00:20:48,860
 and then you can

1075
00:20:48,860 --> 00:20:50,040
 convert that into a

1076
00:20:50,040 --> 00:20:50,770
 directory name

1077
00:20:50,770 --> 00:20:51,880
 instead. And if you

1078
00:20:51,880 --> 00:20:52,760
 use that, then it

1079
00:20:52,760 --> 00:20:53,990
 works correctly this

1080
00:20:53,990 --> 00:20:55,200
 time. And I've used

1081
00:20:55,200 --> 00:20:56,630
 the double dots here,

1082
00:20:56,630 --> 00:20:57,450
 because we want to

1083
00:20:57,450 --> 00:20:57,880
 go one

1084
00:20:57,880 --> 00:21:00,010
 directory up from

1085
00:21:00,010 --> 00:21:02,480
 this directory. So

1086
00:21:02,480 --> 00:21:04,280
 because the packet.json

1087
00:21:04,280 --> 00:21:05,530
 file, of course,

1088
00:21:05,530 --> 00:21:06,240
 exists in

1089
00:21:06,240 --> 00:21:07,100
 the root directory,

1090
00:21:07,100 --> 00:21:07,830
 not the slide five

1091
00:21:07,830 --> 00:21:08,850
 directory. So if I

1092
00:21:08,850 --> 00:21:10,650
 go back to package.json,

1093
00:21:10,650 --> 00:21:11,440
 change this

1094
00:21:11,440 --> 00:21:13,880
 to final.mjs, and

1095
00:21:13,880 --> 00:21:16,020
 then npm install.

1096
00:21:16,020 --> 00:21:18,250
 Yeah, I need to go

1097
00:21:18,250 --> 00:21:20,850
 here, npm install.

1098
00:21:20,850 --> 00:21:22,040
 And then if

1099
00:21:22,040 --> 00:21:24,050
 I try to run the how

1100
00:21:24,050 --> 00:21:26,510
 command by going up,

1101
00:21:26,510 --> 00:21:28,700
 yeah, this time it

1102
00:21:28,700 --> 00:21:30,510
 works fine, even

1103
00:21:30,510 --> 00:21:31,440
 though

1104
00:21:31,440 --> 00:21:32,660
 it's in a different

1105
00:21:32,660 --> 00:21:34,040
 directory, because

1106
00:21:34,040 --> 00:21:35,060
 it can just read

1107
00:21:35,060 --> 00:21:36,230
 from the relative

1108
00:21:36,230 --> 00:21:37,040
 path which

1109
00:21:37,040 --> 00:21:40,710
 we have generated

1110
00:21:40,710 --> 00:21:43,460
 there. So yeah, I

1111
00:21:43,460 --> 00:21:44,360
 think that was

1112
00:21:44,360 --> 00:21:45,840
 pretty much my talk,

1113
00:21:45,840 --> 00:21:46,320
 so thank you.

1114
00:21:46,320 --> 00:21:48,270
 I wanted to give a

1115
00:21:48,270 --> 00:21:49,660
 very simple

1116
00:21:49,660 --> 00:21:52,030
 introduction to how

1117
00:21:52,030 --> 00:21:54,100
 to build CLIs, so

1118
00:21:54,100 --> 00:21:56,400
 thanks. Yeah.

1119
00:21:56,400 --> 00:21:58,000
 >> What are these

1120
00:21:58,000 --> 00:21:59,960
 type definitions in

1121
00:21:59,960 --> 00:22:02,230
 commands? >> Yeah,

1122
00:22:02,230 --> 00:22:03,900
 so sorry for not

1123
00:22:03,900 --> 00:22:05,880
 explaining it well.

1124
00:22:05,880 --> 00:22:06,870
 Those are basically

1125
00:22:06,870 --> 00:22:07,440
 JS docs type

1126
00:22:07,440 --> 00:22:08,370
 definitions. So

1127
00:22:08,370 --> 00:22:09,350
 instead of having to

1128
00:22:09,350 --> 00:22:10,440
 use TypeScript type

1129
00:22:10,440 --> 00:22:11,480
 definitions, which

1130
00:22:11,480 --> 00:22:12,270
 you would use if you

1131
00:22:12,270 --> 00:22:13,360
 were using TypeScript,

1132
00:22:13,360 --> 00:22:14,100
 you can now use JS

1133
00:22:14,100 --> 00:22:14,560
 doc type

1134
00:22:14,560 --> 00:22:16,360
 definitions, which

1135
00:22:16,360 --> 00:22:18,000
 support all of TypeScript's

1136
00:22:18,000 --> 00:22:19,400
 type definitions as

1137
00:22:19,400 --> 00:22:20,460
 well. So instead of

1138
00:22:20,460 --> 00:22:20,640
 having

1139
00:22:20,640 --> 00:22:21,600
 to use a build tool

1140
00:22:21,600 --> 00:22:22,840
 to convert TypeScript

1141
00:22:22,840 --> 00:22:23,420
 files into

1142
00:22:23,420 --> 00:22:24,520
 JavaScript files,

1143
00:22:24,520 --> 00:22:25,280
 you can now use

1144
00:22:25,280 --> 00:22:26,040
 JavaScript

1145
00:22:26,040 --> 00:22:27,150
 files directly with

1146
00:22:27,150 --> 00:22:28,060
 JS docs comments

1147
00:22:28,060 --> 00:22:29,050
 inside of them,

1148
00:22:29,050 --> 00:22:30,010
 which define the

1149
00:22:30,010 --> 00:22:30,770
 types of the

1150
00:22:30,770 --> 00:22:31,200
 variables

1151
00:22:31,200 --> 00:22:32,200
 that you want to use.

1152
00:22:32,200 --> 00:22:33,460
 >> Yeah, but is it

1153
00:22:33,460 --> 00:22:35,870
 just the dot, is it

1154
00:22:35,870 --> 00:22:37,240
 just

1155
00:22:37,240 --> 00:22:38,050
 the quotation? >>

1156
00:22:38,050 --> 00:22:38,700
 Yeah, yeah, it

1157
00:22:38,700 --> 00:22:39,520
 actually checks the

1158
00:22:39,520 --> 00:22:40,000
 types.

1159
00:22:40,000 --> 00:22:41,030
 So you can use TSC

1160
00:22:41,030 --> 00:22:42,360
 to type check JS doc

1161
00:22:42,360 --> 00:22:43,520
 comments as well.

1162
00:22:43,520 --> 00:22:44,870
 >> Okay, but then

1163
00:22:44,870 --> 00:22:46,220
 you use TSC, so if

1164
00:22:46,220 --> 00:22:47,840
 you don't use TSC.

1165
00:22:47,840 --> 00:22:48,580
 >> Yeah, you don't

1166
00:22:48,580 --> 00:22:49,570
 get type checks, but

1167
00:22:49,570 --> 00:22:50,080
 you don't need to

1168
00:22:50,080 --> 00:22:50,870
 use a build tool, so

1169
00:22:50,870 --> 00:22:51,320
 that's

1170
00:22:51,320 --> 00:22:53,170
 the main advantage.

1171
00:22:53,170 --> 00:22:55,090
 >> Yes, so you, okay,

1172
00:22:55,090 --> 00:22:58,080
 so you don't use TSC,

1173
00:22:58,080 --> 00:22:58,700
 so we didn't check

1174
00:22:58,700 --> 00:22:59,400
 the types, you just

1175
00:22:59,400 --> 00:23:00,140
 identified, but you

1176
00:23:00,140 --> 00:23:00,730
 could check them

1177
00:23:00,730 --> 00:23:06,480
 with TSC beyond.

1178
00:23:06,480 --> 00:23:07,040
 >> Yeah, yeah,

1179
00:23:07,040 --> 00:23:07,480
 exactly. >> It's

1180
00:23:07,480 --> 00:23:07,480
 brilliant.

1181
00:23:07,480 --> 00:23:08,480
 >> Thanks. >> Thank

1182
00:23:08,480 --> 00:23:08,480
 you so much.

1183
00:23:08,480 --> 00:23:09,480
 >> Yeah, no worries.

1184
00:23:09,480 --> 00:23:09,480
 >> A couple of

1185
00:23:09,480 --> 00:23:09,480
 questions, actually.

1186
00:23:09,480 --> 00:23:09,880
 >> Yeah. >> You know

1187
00:23:09,880 --> 00:23:10,260
 when you moved one

1188
00:23:10,260 --> 00:23:10,480
 directory outside

1189
00:23:10,480 --> 00:23:12,960
 of where the problem

1190
00:23:12,960 --> 00:23:16,180
 was installed, right?

1191
00:23:16,180 --> 00:23:18,800
 If you run a command,

1192
00:23:18,800 --> 00:23:21,520
 it works. Now if you

1193
00:23:21,520 --> 00:23:21,980
 moved two

1194
00:23:21,980 --> 00:23:23,120
 directories outside,

1195
00:23:23,120 --> 00:23:24,100
 it'll work. >> Yeah,

1196
00:23:24,100 --> 00:23:24,890
 of course. You can

1197
00:23:24,890 --> 00:23:26,320
 navigate anywhere,

1198
00:23:26,320 --> 00:23:27,260
 and it will still

1199
00:23:27,260 --> 00:23:28,030
 work, because, I

1200
00:23:28,030 --> 00:23:29,000
 mean, I'll explain

1201
00:23:29,000 --> 00:23:29,800
 the reason why it

1202
00:23:29,800 --> 00:23:30,840
 will still work,

1203
00:23:30,840 --> 00:23:31,930
 and then I'll show

1204
00:23:31,930 --> 00:23:33,260
 you how it works. So

1205
00:23:33,260 --> 00:23:34,320
 the reason why it

1206
00:23:34,320 --> 00:23:35,390
 would work is that

1207
00:23:35,390 --> 00:23:37,480
 we are, sorry,

1208
00:23:37,480 --> 00:23:38,580
 or git blame is

1209
00:23:38,580 --> 00:23:39,970
 picking up there. So

1210
00:23:39,970 --> 00:23:42,060
 yeah, import.meta.urls

1211
00:23:42,060 --> 00:23:43,050
 points to this

1212
00:23:43,050 --> 00:23:44,240
 specific file,

1213
00:23:44,240 --> 00:23:45,570
 and whatever context

1214
00:23:45,570 --> 00:23:46,820
 this file is running

1215
00:23:46,820 --> 00:23:48,060
 in, be it like an NPM

1216
00:23:48,060 --> 00:23:49,160
 module or locally

1217
00:23:49,160 --> 00:23:49,480
 via

1218
00:23:49,480 --> 00:23:50,990
 Node.js script or

1219
00:23:50,990 --> 00:23:52,210
 whatever, this value

1220
00:23:52,210 --> 00:23:53,460
 will always point to

1221
00:23:53,460 --> 00:23:54,660
 wherever this file

1222
00:23:54,660 --> 00:23:55,560
 is located,

1223
00:23:55,560 --> 00:23:56,720
 and so we are

1224
00:23:56,720 --> 00:23:58,810
 converting that file

1225
00:23:58,810 --> 00:24:00,480
 path URI to a path

1226
00:24:00,480 --> 00:24:02,280
 instead, which is

1227
00:24:02,280 --> 00:24:03,780
 then allowing

1228
00:24:03,780 --> 00:24:05,090
 us to do this, which

1229
00:24:05,090 --> 00:24:06,180
 points to the actual

1230
00:24:06,180 --> 00:24:07,640
 package.json file.

1231
00:24:07,640 --> 00:24:09,770
 And now I can, yeah,

1232
00:24:09,770 --> 00:24:10,040
 so

1233
00:24:10,040 --> 00:24:11,080
 I can go anywhere,

1234
00:24:11,080 --> 00:24:12,200
 and I'll still, if I

1235
00:24:12,200 --> 00:24:13,380
 run the how command,

1236
00:24:13,380 --> 00:24:14,440
 it will still point

1237
00:24:14,440 --> 00:24:14,880
 to the

1238
00:24:14,880 --> 00:24:15,300
 right file there. >>

1239
00:24:15,300 --> 00:24:15,630
 Yeah, that makes

1240
00:24:15,630 --> 00:24:15,880
 sense.

1241
00:24:15,880 --> 00:24:16,040
 >> One of the

1242
00:24:16,040 --> 00:24:16,410
 questions is, Node.js

1243
00:24:16,410 --> 00:24:16,880
 should ban? >> Yeah.

1244
00:24:16,880 --> 00:24:17,250
 >> I assume they don't

1245
00:24:17,250 --> 00:24:17,630
 have Node.js on your

1246
00:24:17,630 --> 00:24:17,880
 system. >> Yeah.

1247
00:24:17,880 --> 00:24:25,840
 >> All right, how

1248
00:24:25,840 --> 00:24:28,560
 does that help you?

1249
00:24:28,560 --> 00:24:29,200
 >> Yeah, so in that

1250
00:24:29,200 --> 00:24:29,690
 case, it will

1251
00:24:29,690 --> 00:24:30,200
 definitely

1252
00:24:30,200 --> 00:24:31,630
 be a problem. So

1253
00:24:31,630 --> 00:24:33,460
 this package, having

1254
00:24:33,460 --> 00:24:35,240
 a package.json and

1255
00:24:35,240 --> 00:24:36,600
 installing a library

1256
00:24:36,600 --> 00:24:37,760
 using NPM install

1257
00:24:37,760 --> 00:24:38,530
 assumes that you

1258
00:24:38,530 --> 00:24:39,400
 have got Node.js

1259
00:24:39,400 --> 00:24:40,400
 already installed in

1260
00:24:40,400 --> 00:24:41,300
 your machine, so

1261
00:24:41,300 --> 00:24:41,880
 that's a big

1262
00:24:41,880 --> 00:24:42,730
 assumption that we

1263
00:24:42,730 --> 00:24:43,680
 are making here. Of

1264
00:24:43,680 --> 00:24:44,830
 course, we would use

1265
00:24:44,830 --> 00:24:45,760
 something like Golang

1266
00:24:45,760 --> 00:24:46,280
 if we wanted

1267
00:24:46,280 --> 00:24:47,230
 to, you know, make

1268
00:24:47,230 --> 00:24:48,260
 it independent of

1269
00:24:48,260 --> 00:24:49,040
 having Node.js

1270
00:24:49,040 --> 00:24:50,280
 installed, I guess.

1271
00:24:50,280 --> 00:25:00,280
 Yeah. >> [INAUDIBLE]

1272
00:25:00,280 --> 00:25:22,730
 >> So it should be

1273
00:25:22,730 --> 00:25:23,840
 able to do that, so

1274
00:25:23,840 --> 00:25:24,860
 I can ask it, for

1275
00:25:24,860 --> 00:25:26,510
 example, well, let's

1276
00:25:26,510 --> 00:25:27,280
 install my

1277
00:25:27,280 --> 00:25:28,830
 actual tool, so,

1278
00:25:28,830 --> 00:25:30,460
 yeah, if I do that,

1279
00:25:30,460 --> 00:25:32,120
 it should install it

1280
00:25:32,120 --> 00:25:33,770
 globally, and now I

1281
00:25:33,770 --> 00:25:35,300
 can do something

1282
00:25:35,300 --> 00:25:37,760
 like if I go to the

1283
00:25:37,760 --> 00:25:40,440
 directory first, how

1284
00:25:40,440 --> 00:25:42,680
 do I create a Python

1285
00:25:42,680 --> 00:25:45,290
 server file and save

1286
00:25:45,290 --> 00:25:45,720
 it

1287
00:25:45,720 --> 00:25:46,870
 locally maybe, so

1288
00:25:46,870 --> 00:25:48,020
 that it knows that I

1289
00:25:48,020 --> 00:25:49,030
 actually want to

1290
00:25:49,030 --> 00:25:50,360
 save that as well.

1291
00:25:50,360 --> 00:25:51,880
 Then, I mean, again,

1292
00:25:51,880 --> 00:25:53,370
 this isn't something

1293
00:25:53,370 --> 00:25:54,350
 that my tool is

1294
00:25:54,350 --> 00:25:55,970
 doing, that this is

1295
00:25:55,970 --> 00:25:57,310
 something that the GPT

1296
00:25:57,310 --> 00:25:57,840
 API is

1297
00:25:57,840 --> 00:25:59,280
 returning, of course.

1298
00:25:59,280 --> 00:26:00,390
 So if it returns

1299
00:26:00,390 --> 00:26:01,900
 this command, let's

1300
00:26:01,900 --> 00:26:03,620
 try to execute it.

1301
00:26:03,620 --> 00:26:04,280
 So it hasn't

1302
00:26:04,280 --> 00:26:06,080
 returned anything

1303
00:26:06,080 --> 00:26:08,090
 yet, but, yeah, we

1304
00:26:08,090 --> 00:26:10,910
 see server.py, so it

1305
00:26:10,910 --> 00:26:12,360
 created server.py

1306
00:26:12,360 --> 00:26:15,120
 here somewhere, yeah.

1307
00:26:15,120 --> 00:26:16,650
 So it created some

1308
00:26:16,650 --> 00:26:18,570
 output and then pasted

1309
00:26:18,570 --> 00:26:20,480
 it to server.py, so

1310
00:26:20,480 --> 00:26:22,800
 if I do cat server.py,

1311
00:26:22,800 --> 00:26:23,520
 then yeah, it still

1312
00:26:23,520 --> 00:26:24,210
 has that, because

1313
00:26:24,210 --> 00:26:24,710
 you can do it by

1314
00:26:24,710 --> 00:26:25,800
 Unix commands, right?

1315
00:26:25,800 --> 00:26:26,040
 So as long

1316
00:26:26,040 --> 00:26:26,820
 as you can do it by

1317
00:26:26,820 --> 00:26:27,620
 Unix commands or

1318
00:26:27,620 --> 00:26:28,650
 PowerShell commands

1319
00:26:28,650 --> 00:26:29,780
 or whatever, the CLI

1320
00:26:29,780 --> 00:26:30,320
 tool should

1321
00:26:30,320 --> 00:26:32,040
 be able to help you

1322
00:26:32,040 --> 00:26:34,400
 with that. Yeah. Any

1323
00:26:34,400 --> 00:26:36,560
 other questions? No?

1324
00:26:36,560 --> 00:26:38,360
 Okay. Yeah. Oh,

1325
00:26:38,360 --> 00:26:40,480
 sorry. Go on.

1326
00:26:40,480 --> 00:26:41,720
 It's actually very

1327
00:26:41,720 --> 00:26:43,390
 cheap. So GPT 4.0

1328
00:26:43,390 --> 00:26:44,610
 mini, I think it's

1329
00:26:44,610 --> 00:26:45,770
 the cheapest tool

1330
00:26:45,770 --> 00:26:46,760
 out there.

1331
00:26:46,760 --> 00:26:48,600
 It costs like 0.005

1332
00:26:48,600 --> 00:26:49,810
 dollars per token or

1333
00:26:49,810 --> 00:26:51,150
 something. I mean,

1334
00:26:51,150 --> 00:26:52,290
 of course, people

1335
00:26:52,290 --> 00:26:53,400
 can correct me if

1336
00:26:53,400 --> 00:26:54,440
 I'm wrong, but I

1337
00:26:54,440 --> 00:26:55,440
 think it's like

1338
00:26:55,440 --> 00:26:56,650
 super cheap. I have

1339
00:26:56,650 --> 00:26:58,300
 put in $10 in, I

1340
00:26:58,300 --> 00:26:59,600
 would say, like very

1341
00:26:59,600 --> 00:27:00,500
 early this year,

1342
00:27:00,500 --> 00:27:01,400
 maybe February or

1343
00:27:01,400 --> 00:27:02,320
 something, but I

1344
00:27:02,320 --> 00:27:03,210
 haven't still run

1345
00:27:03,210 --> 00:27:04,320
 out just by building

1346
00:27:04,320 --> 00:27:06,190
 this tool and

1347
00:27:06,190 --> 00:27:08,680
 working on other

1348
00:27:08,680 --> 00:27:13,760
 side projects. Okay.

1349
00:27:13,760 --> 00:27:21,080
 Okay. Yeah, yeah, so

1350
00:27:21,080 --> 00:27:26,440
 it's super cheap.

1351
00:27:26,440 --> 00:27:27,230
 But I think the GPT

1352
00:27:27,230 --> 00:27:28,350
 4.0 mini performs

1353
00:27:28,350 --> 00:27:28,930
 really bad as

1354
00:27:28,930 --> 00:27:30,190
 compared to GPT 4.0,

1355
00:27:30,190 --> 00:27:30,960
 especially if

1356
00:27:30,960 --> 00:27:33,400
 you're trying to do

1357
00:27:33,400 --> 00:27:35,140
 stuff like run

1358
00:27:35,140 --> 00:27:36,330
 commands

1359
00:27:36,330 --> 00:27:39,020
 successfully on your

1360
00:27:39,020 --> 00:27:41,100
 command line, I

1361
00:27:41,100 --> 00:27:42,360
 think.

1362
00:27:42,360 --> 00:27:47,400
 Yeah, yeah, it's

1363
00:27:47,400 --> 00:27:53,380
 definitely faster.

1364
00:27:53,380 --> 00:27:58,430
 Make sense? Yeah. So

1365
00:27:58,430 --> 00:27:59,500
 yeah, that's my

1366
00:27:59,500 --> 00:28:00,600
 website. Reach out

1367
00:28:00,600 --> 00:28:01,710
 to me if you want to.

1368
00:28:01,710 --> 00:28:02,690
 And I'm available

1369
00:28:02,690 --> 00:28:03,540
 for independent

1370
00:28:03,540 --> 00:28:04,610
 consulting on any AI

1371
00:28:04,610 --> 00:28:05,240
 projects

1372
00:28:05,240 --> 00:28:13,720
 you might have. So

1373
00:28:13,720 --> 00:28:19,240
 thank you.

1374
00:28:19,240 --> 00:28:27,680
 I'm just waiting for

1375
00:28:27,680 --> 00:28:30,680
 you.

